-- this file should be autogenerated by the mach-installer or be the defaults that are provided on the github stable branch.
-- Do not change without reading the relevant plugin-opt-docs.md entry.

vim.mach_enabled = {
    "avante",
    "blink",
    "img_clip",
    "render_markdown",
    "comment",
    "onedark",
    "gitsigns",
    "treesitter",
    "which_key",
    "ts_rainbow",
}


vim.mach_opts = {
    -- avante config
    avante = {
        -- TODO: Other Providers
        auto_suggestions_provider = "ollama",
        provider = "openai",
        openai = {
            endpoint = "https://api.openai.com/v1",
            model = "o4-mini",
            timeout = 60000,
            temperature = 0,
            max_completion_tokens = 32768,
            reasoning_effort = "low",
        },
        ollama = {
            -- this is not very good but in my experience it can run on nearly
            -- anything. requires ollama0.60.
            model = "gemma3:4b",
        },
        behaviour = {
            auto_suggestions = true, -- Experimental stage
            auto_set_highlight_group = true,
            auto_set_keymaps = true,
            auto_apply_diff_after_generation = false,
            support_paste_from_clipboard = false,
            minimize_diff = true,                        -- Whether to remove unchanged lines when applying a code block
            enable_token_counting = true,                -- Whether to enable token counting. Default to true.
            enable_cursor_planning_mode = false,         -- Whether to enable Cursor Planning Mode. Default to false.
            enable_claude_text_editor_tool_mode = false, -- Whether to enable Claude Text Editor Tool Mode.
        },
        file_selector = { provider = "snacks", },
        windows = { position = "right", wrap = true, width = 20, },
    },
    -- blink config
    blink = {
        keymap = { preset = 'super-tab' },

        completion = {
            list = {
                selection = { preselect = true, auto_insert = true },
            },
        },
        appearance = { nerd_font_variant = 'mono' },

        sources = {
            default = { 'avante', 'lsp', 'path', 'buffer' },
            providers = {
                avante = {
                    module = 'blink-cmp-avante',
                    name = 'Avante',
                    opts = {
                        -- options for blink-cmp-avante
                    }
                }
            },

        },
        fuzzy = { implementation = "prefer_rust_with_warning" },

        enabled = function()
            local disabled = false
                or (vim.tbl_contains({ "markdown" }, vim.bo.filetype))
                or (vim.bo.buftype == "prompt")
                or (vim.fn.reg_recording() ~= "")
                or (vim.fn.reg_executing() ~= "")
            return not disabled
        end,
    },
    -- img_clip
    img_clip = {
        -- recommended settings
        default = {
            embed_image_as_base64 = false,
            prompt_for_file_name = false,
            drag_and_drop = {
                insert_mode = true,
            },
            -- required for Windows users
            use_absolute_path = true,
        },
    },
    -- render-markdown
    render_markdown = {
        file_types = { "markdown", "Avante" },
    },
    -- comment
    comment = {
        padding = true,
        sticky = true,
        ignore = nil,
        toggler = {
            line = 'gcc',  ---Line-comment toggle keymap
            block = 'gbc', ---Block-comment toggle keymap
        },
        opleader = {
            line = 'gc',
            block = 'gb',
        },
        extra = {
            above = 'gcO', ---Add comment on the line above
            below = 'gco', ---Add comment on the line below
            eol = 'gcA',   ---Add comment at the end of line
        },
        mappings = {
            basic = true,
            extra = true,
        },
        pre_hook = nil,
        post_hook = nil,
    },
    -- onedark
    onedark = {
        style = "darker",
        code_style = { comments = 'none', },
        highlights = {
            Normal = {
                bg = "#232526",
            },
            EndOfBuffer = {
                bg = "#232526",
            }
        },
    },
    -- gitsigns
    gitsigns = {
        signcolumn                   = true,  -- Toggle with `:Gitsigns toggle_signs`
        numhl                        = false, -- Toggle with `:Gitsigns toggle_numhl`
        linehl                       = false, -- Toggle with `:Gitsigns toggle_linehl`
        word_diff                    = false, -- Toggle with `:Gitsigns toggle_word_diff`
        watch_gitdir                 = {
            interval = 1000,
            follow_files = true
        },
        attach_to_untracked          = false,
        current_line_blame           = true, -- Toggle with `:Gitsigns toggle_current_line_blame`
        current_line_blame_opts      = {
            virt_text = true,
            virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
            delay = 1000,
            ignore_whitespace = false,
        },
        current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
        sign_priority                = 6,
        update_debounce              = 100,
        status_formatter             = nil, -- Use default
        max_file_length              = 40000,
        preview_config               = {
            -- Options passed to nvim_open_win
            border = 'single',
            style = 'minimal',
            relative = 'cursor',
            row = 0,
            col = 1
        }
    },
    -- treesitter
    treesitter = {
        sync_install = false, -- async parser install
        auto_install = false, -- avoid delay on first open
        highlight = {
            enable = true,
            additional_vim_regex_highlighting = false,
        },
        indent = {
            enable = true,
        },
        incremental_selection = {
            enable = true,
        },
        rainbow = {
            enable = true,
            extended_mode = true,
            max_file_lines = nil,
        },
        disable = { "gitcommit" },
    },
    -- which-key
    which_key = {
        plugins = {
            marks = true,     -- shows a list of your marks on ' and `
            registers = true, -- shows your registers on " in NORMAL or <C-r> in INSERT mode
            -- the presets plugin, adds help for a bunch of default keybindings in Neovim
            -- No actual key bindings are created
            spelling = {
                enabled = true,
                suggestions = 40,
            },
            presets = {
                operators = true,    -- adds help for operators like d, y, ...
                motions = true,      -- adds help for motions
                text_objects = true, -- help for text objects triggered after entering an operator
                windows = true,      -- default bindings on <c-w>
                nav = true,          -- misc bindings to work with windows
                z = true,            -- bindings for folds, spelling and others prefixed with z
                g = true,            -- bindings for prefixed with g
            },
        },
        icons = {
            breadcrumb = "»", -- symbol used in the command line area that shows your active key combo
            separator = "➜", -- symbol used between a key and it's label
            group = "+", -- symbol prepended to a group
        },
        layout = {
            height = { min = 4, max = 25 }, -- min and max height of the columns
            width = { min = 20, max = 50 }, -- min and max width of the columns
            spacing = 3,                    -- spacing between columns
            align = "left",                 -- align columns left, center or right
        },
        show_help = true,                   -- show a help message in the command line for using WhichKey
        show_keys = true,                   -- show the currently pressed key and its label as a message in the command line
        -- triggers = {"<leader>"} -- or specifiy a list manually
        -- list of triggers, where WhichKey should not wait for timeoutlen and show immediately
        -- disable the WhichKey popup for certain buf types and file types.
        disable = {
            buftypes = {},
            filetypes = {},
        },
    },
    -- ts-rainbow
    ts_rainbow = {
        strategy = {
            [''] = 'rainbow-delimiters.strategy.global',
            vim = 'rainbow-delimiters.strategy.local',
        },
        query = {
            [''] = 'rainbow-delimiters',
            lua = 'rainbow-blocks',
        },
        priority = {
            [''] = 110,
            lua = 210,
        },
        highlight = {
            'RainbowDelimiterRed',
            'RainbowDelimiterYellow',
            'RainbowDelimiterBlue',
            'RainbowDelimiterOrange',
            'RainbowDelimiterGreen',
            'RainbowDelimiterViolet',
            'RainbowDelimiterCyan',
        },
    },
    mach_builtins = {
        autosave = {
            enabled       = true,
            autosave_time = 0,    -- milliseconds
            notify        = true, -- wether or not to  notify
        }
    },
}

local function validate_opts()
    for _, plugin in ipairs(vim.mach_enabled) do
        vim.notify("Validating config for " .. plugin, vim.log.levels.INFO)
        if vim.mach_opts[plugin] == nil then
            vim.notify("config for " .. plugin .. " does not exist", vim.log.levels.ERROR)
            return
        else
            vim.notify("config for " .. plugin .. " found", vim.log.levels.INFO)
        end
    end
end

vim.api.nvim_create_user_command("MachValidateOpts", validate_opts, { nargs = 0 })
